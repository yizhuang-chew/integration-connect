/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Project, ProjectUpdate } from '../models/project';
import { executeRequest } from '../shared/utils/common-types';
import { ApiRequest } from '../shared/utils/requests-utils';
import { ByProjectKeyApiClientsRequestBuilder } from './api-clients/by-project-key-api-clients-request-builder';
import { ByProjectKeyAsAssociateRequestBuilder } from './as-associate/by-project-key-as-associate-request-builder';
import { ByProjectKeyAssociateRolesRequestBuilder } from './associate-roles/by-project-key-associate-roles-request-builder';
import { ByProjectKeyAttributeGroupsRequestBuilder } from './attribute-groups/by-project-key-attribute-groups-request-builder';
import { ByProjectKeyBusinessUnitsRequestBuilder } from './business-units/by-project-key-business-units-request-builder';
import { ByProjectKeyCartDiscountsRequestBuilder } from './cart-discounts/by-project-key-cart-discounts-request-builder';
import { ByProjectKeyCartsRequestBuilder } from './carts/by-project-key-carts-request-builder';
import { ByProjectKeyCategoriesRequestBuilder } from './categories/by-project-key-categories-request-builder';
import { ByProjectKeyChannelsRequestBuilder } from './channels/by-project-key-channels-request-builder';
import { ByProjectKeyCustomObjectsRequestBuilder } from './custom-objects/by-project-key-custom-objects-request-builder';
import { ByProjectKeyCustomerGroupsRequestBuilder } from './customer-groups/by-project-key-customer-groups-request-builder';
import { ByProjectKeyCustomersRequestBuilder } from './customers/by-project-key-customers-request-builder';
import { ByProjectKeyDiscountCodesRequestBuilder } from './discount-codes/by-project-key-discount-codes-request-builder';
import { ByProjectKeyExtensionsRequestBuilder } from './extensions/by-project-key-extensions-request-builder';
import { ByProjectKeyGraphqlRequestBuilder } from './graphql/by-project-key-graphql-request-builder';
import { ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder } from './in-business-unit/by-project-key-in-business-unit-key-by-business-unit-key-request-builder';
import { ByProjectKeyInStoreKeyByStoreKeyRequestBuilder } from './in-store/by-project-key-in-store-key-by-store-key-request-builder';
import { ByProjectKeyInventoryRequestBuilder } from './inventory/by-project-key-inventory-request-builder';
import { ByProjectKeyLoginRequestBuilder } from './login/by-project-key-login-request-builder';
import { ByProjectKeyMeRequestBuilder } from './me/by-project-key-me-request-builder';
import { ByProjectKeyMessagesRequestBuilder } from './messages/by-project-key-messages-request-builder';
import { ByProjectKeyOrdersRequestBuilder } from './orders/by-project-key-orders-request-builder';
import { ByProjectKeyPaymentsRequestBuilder } from './payments/by-project-key-payments-request-builder';
import { ByProjectKeyProductDiscountsRequestBuilder } from './product-discounts/by-project-key-product-discounts-request-builder';
import { ByProjectKeyProductProjectionsRequestBuilder } from './product-projections/by-project-key-product-projections-request-builder';
import { ByProjectKeyProductSelectionsRequestBuilder } from './product-selections/by-project-key-product-selections-request-builder';
import { ByProjectKeyProductTypesRequestBuilder } from './product-types/by-project-key-product-types-request-builder';
import { ByProjectKeyProductsRequestBuilder } from './products/by-project-key-products-request-builder';
import { ByProjectKeyQuoteRequestsRequestBuilder } from './quote-requests/by-project-key-quote-requests-request-builder';
import { ByProjectKeyQuotesRequestBuilder } from './quotes/by-project-key-quotes-request-builder';
import { ByProjectKeyReviewsRequestBuilder } from './reviews/by-project-key-reviews-request-builder';
import { ByProjectKeyShippingMethodsRequestBuilder } from './shipping-methods/by-project-key-shipping-methods-request-builder';
import { ByProjectKeyShoppingListsRequestBuilder } from './shopping-lists/by-project-key-shopping-lists-request-builder';
import { ByProjectKeyStagedQuotesRequestBuilder } from './staged-quotes/by-project-key-staged-quotes-request-builder';
import { ByProjectKeyStandalonePricesRequestBuilder } from './standalone-prices/by-project-key-standalone-prices-request-builder';
import { ByProjectKeyStatesRequestBuilder } from './states/by-project-key-states-request-builder';
import { ByProjectKeyStoresRequestBuilder } from './stores/by-project-key-stores-request-builder';
import { ByProjectKeySubscriptionsRequestBuilder } from './subscriptions/by-project-key-subscriptions-request-builder';
import { ByProjectKeyTaxCategoriesRequestBuilder } from './tax-categories/by-project-key-tax-categories-request-builder';
import { ByProjectKeyTypesRequestBuilder } from './types/by-project-key-types-request-builder';
import { ByProjectKeyZonesRequestBuilder } from './zones/by-project-key-zones-request-builder';
/**
 **/
export declare class ByProjectKeyRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    asAssociate(): ByProjectKeyAsAssociateRequestBuilder;
    /**
     *	An Associate Role enables permissions over a Business Unit to an Associate.
     */
    associateRoles(): ByProjectKeyAssociateRolesRequestBuilder;
    /**
     *	A Business Unit can represent a Company or a Division.
     */
    businessUnits(): ByProjectKeyBusinessUnitsRequestBuilder;
    /**
     *	Categories are used to organize products in a hierarchical structure.
     */
    categories(): ByProjectKeyCategoriesRequestBuilder;
    /**
     *	A shopping cart holds product variants and can be ordered.
     */
    carts(): ByProjectKeyCartsRequestBuilder;
    /**
     *	Cart discounts are used to change the prices of different elements within a cart.
     */
    cartDiscounts(): ByProjectKeyCartDiscountsRequestBuilder;
    /**
     *	Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
     *
     */
    channels(): ByProjectKeyChannelsRequestBuilder;
    /**
     *	A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
     *
     */
    customers(): ByProjectKeyCustomersRequestBuilder;
    /**
     *	customer-groups are used to evaluate products and channels.
     */
    customerGroups(): ByProjectKeyCustomerGroupsRequestBuilder;
    /**
     *	Store custom JSON values.
     */
    customObjects(): ByProjectKeyCustomObjectsRequestBuilder;
    /**
     *	Discount Codes can be added to a discount-code to enable certain discount-code discounts.
     */
    discountCodes(): ByProjectKeyDiscountCodesRequestBuilder;
    /**
     *	commercetools Composable Commerce provides a GraphQL API
     */
    graphql(): ByProjectKeyGraphqlRequestBuilder;
    /**
     *	Inventory allows you to track stock quantities.
     */
    inventory(): ByProjectKeyInventoryRequestBuilder;
    /**
     *	Retrieves the authenticated customer.
     */
    login(): ByProjectKeyLoginRequestBuilder;
    /**
     *	A message represents a change or an action performed on a resource (like an Order or a Product).
     */
    messages(): ByProjectKeyMessagesRequestBuilder;
    /**
     *	An order can be created from a order, usually after a checkout process has been completed.
     */
    orders(): ByProjectKeyOrdersRequestBuilder;
    /**
     *	Payments hold information about the current state of receiving and/or refunding money
     */
    payments(): ByProjectKeyPaymentsRequestBuilder;
    /**
     *	Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.
     *
     */
    products(): ByProjectKeyProductsRequestBuilder;
    /**
     *	Product discounts are used to change certain product prices.
     */
    productDiscounts(): ByProjectKeyProductDiscountsRequestBuilder;
    /**
     *	A projected representation of a product shows the product with its current or staged data. The current or staged
     *	representation of a product in a catalog is called a product projection.
     *
     */
    productProjections(): ByProjectKeyProductProjectionsRequestBuilder;
    /**
     *	Manage individual Store assortments through Product Selections.
     *
     *	After you have created Product Selections and populated them with Products,
     *	you can manage Store assortments by assigning Product Selections to Stores.
     *	Product Selections may be used by a single Store or shared across several Stores.
     *
     *	As a good practice, we recommend first creating Products in the project, and then creating Product Selection.
     *
     */
    productSelections(): ByProjectKeyProductSelectionsRequestBuilder;
    /**
     *	Product Types are used to describe common characteristics, most importantly common custom attributes,
     *	of many concrete products.
     *
     */
    productTypes(): ByProjectKeyProductTypesRequestBuilder;
    /**
     *	A quote holds the negotiated offer.
     */
    quotes(): ByProjectKeyQuotesRequestBuilder;
    /**
     *	A request for a Quote holds product variants and can be ordered.
     */
    quoteRequests(): ByProjectKeyQuoteRequestsRequestBuilder;
    /**
     *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
     */
    stagedQuotes(): ByProjectKeyStagedQuotesRequestBuilder;
    /**
     *	Reviews are used to evaluate products and channels.
     */
    reviews(): ByProjectKeyReviewsRequestBuilder;
    /**
     *	ShippingMethods define where orders can be shipped and what the costs are.
     */
    shippingMethods(): ByProjectKeyShippingMethodsRequestBuilder;
    /**
     *	shopping-lists e.g. for wishlist support
     */
    shoppingLists(): ByProjectKeyShoppingListsRequestBuilder;
    /**
     *	commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
     *	reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
     *	implement.
     *
     */
    states(): ByProjectKeyStatesRequestBuilder;
    /**
     *	Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
     */
    subscriptions(): ByProjectKeySubscriptionsRequestBuilder;
    /**
     *	Tax Categories define how products are to be taxed in different countries.
     */
    taxCategories(): ByProjectKeyTaxCategoriesRequestBuilder;
    /**
     *	Types define custom fields that are used to enhance resources as you need.
     */
    types(): ByProjectKeyTypesRequestBuilder;
    /**
     *	Zones allow defining ShippingRates for specific Locations.
     */
    zones(): ByProjectKeyZonesRequestBuilder;
    me(): ByProjectKeyMeRequestBuilder;
    /**
     *	Extend the behavior of an API with your business logic
     */
    extensions(): ByProjectKeyExtensionsRequestBuilder;
    /**
     *	Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
     *
     */
    apiClients(): ByProjectKeyApiClientsRequestBuilder;
    /**
     *	Stores let you model the context your customers shop in.
     */
    stores(): ByProjectKeyStoresRequestBuilder;
    inStoreKeyWithStoreKeyValue(childPathArgs: {
        storeKey: string;
    }): ByProjectKeyInStoreKeyByStoreKeyRequestBuilder;
    /**
     *	A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).
     */
    standalonePrices(): ByProjectKeyStandalonePricesRequestBuilder;
    inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs: {
        businessUnitKey: string;
    }): ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder;
    /**
     *	Attribute groups ... TODO
     */
    attributeGroups(): ByProjectKeyAttributeGroupsRequestBuilder;
    get(methodArgs?: {
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Project>;
    post(methodArgs: {
        body: ProjectUpdate;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Project>;
}
