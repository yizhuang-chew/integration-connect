import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import expressWinston from 'express-winston';
import * as winston from 'winston';
import winston__default from 'winston';
import cloneDeep from 'lodash/cloneDeep';
import getIn from 'lodash/get';
import setIn from 'lodash/set';
import unsetIn from 'lodash/unset';
import { format } from 'logform';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }

const createAccessLoggerMiddleware = function () {
  var _options$ignoreUrls, _options$formatters, _options$level;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const ignoreUrls = (_options$ignoreUrls = options.ignoreUrls) !== null && _options$ignoreUrls !== void 0 ? _options$ignoreUrls : [];
  const formatters = winston__default.format.combine(winston__default.format.timestamp(), ...((_options$formatters = options.formatters) !== null && _options$formatters !== void 0 ? _options$formatters : []), options.json ? winston__default.format.json() : winston__default.format.cli());
  return expressWinston.logger({
    level: (_options$level = options.level) !== null && _options$level !== void 0 ? _options$level : 'info',
    transports: [new winston__default.transports.Console()],
    format: formatters,
    meta: true,
    expressFormat: true,
    // Use default morgan access log formatting
    colorize: !options.json,
    skip: req => Boolean(options.silent) || _includesInstanceProperty(ignoreUrls).call(ignoreUrls, req.originalUrl),
    dynamicMeta: req => _objectSpread({
      ip: req.ip,
      ips: req.ips,
      hostname: req.hostname
    }, req.connection.remoteAddress ? {
      remoteAddress: req.connection.remoteAddress
    } : {})
  });
};

const createApplicationLogger = function () {
  var _options$formatters, _options$level;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const formatters = winston.format.combine(...((_options$formatters = options.formatters) !== null && _options$formatters !== void 0 ? _options$formatters : []), options.json ? winston.format.json() : winston.format.combine(winston.format.cli(), winston.format.simple()));
  return winston.createLogger({
    level: (_options$level = options.level) !== null && _options$level !== void 0 ? _options$level : 'info',
    format: formatters,
    transports: [new winston.transports.Console({
      silent: Boolean(options.silent)
    })]
  });
};

function rewriteField(info, field) {
  const val = getIn(info, field.from);

  if (val) {
    unsetIn(info, field.from);
    setIn(info, field.to, field.replaceValue ? field.replaceValue(val) : val);
  }
}

function rewriteFieldsFormatter(options) {
  return format(info => {
    var _context;

    const clone = cloneDeep(info);

    _forEachInstanceProperty(_context = options.fields).call(_context, field => {
      rewriteField(clone, field);
    });

    return clone;
  })(options);
}

export { createAccessLoggerMiddleware, createApplicationLogger, rewriteFieldsFormatter };
