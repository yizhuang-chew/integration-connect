'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var expressWinston = require('express-winston');
var winston = require('winston');
var cloneDeep = require('lodash/cloneDeep');
var getIn = require('lodash/get');
var setIn = require('lodash/set');
var unsetIn = require('lodash/unset');
var logform = require('logform');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var expressWinston__default = /*#__PURE__*/_interopDefault(expressWinston);
var winston__namespace = /*#__PURE__*/_interopNamespace(winston);
var cloneDeep__default = /*#__PURE__*/_interopDefault(cloneDeep);
var getIn__default = /*#__PURE__*/_interopDefault(getIn);
var setIn__default = /*#__PURE__*/_interopDefault(setIn);
var unsetIn__default = /*#__PURE__*/_interopDefault(unsetIn);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }

const createAccessLoggerMiddleware = function () {
  var _options$ignoreUrls, _options$formatters, _options$level;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const ignoreUrls = (_options$ignoreUrls = options.ignoreUrls) !== null && _options$ignoreUrls !== void 0 ? _options$ignoreUrls : [];
  const formatters = winston__namespace["default"].format.combine(winston__namespace["default"].format.timestamp(), ...((_options$formatters = options.formatters) !== null && _options$formatters !== void 0 ? _options$formatters : []), options.json ? winston__namespace["default"].format.json() : winston__namespace["default"].format.cli());
  return expressWinston__default["default"].logger({
    level: (_options$level = options.level) !== null && _options$level !== void 0 ? _options$level : 'info',
    transports: [new winston__namespace["default"].transports.Console()],
    format: formatters,
    meta: true,
    expressFormat: true,
    // Use default morgan access log formatting
    colorize: !options.json,
    skip: req => Boolean(options.silent) || _includesInstanceProperty__default["default"](ignoreUrls).call(ignoreUrls, req.originalUrl),
    dynamicMeta: req => _objectSpread({
      ip: req.ip,
      ips: req.ips,
      hostname: req.hostname
    }, req.connection.remoteAddress ? {
      remoteAddress: req.connection.remoteAddress
    } : {})
  });
};

const createApplicationLogger = function () {
  var _options$formatters, _options$level;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const formatters = winston__namespace.format.combine(...((_options$formatters = options.formatters) !== null && _options$formatters !== void 0 ? _options$formatters : []), options.json ? winston__namespace.format.json() : winston__namespace.format.combine(winston__namespace.format.cli(), winston__namespace.format.simple()));
  return winston__namespace.createLogger({
    level: (_options$level = options.level) !== null && _options$level !== void 0 ? _options$level : 'info',
    format: formatters,
    transports: [new winston__namespace.transports.Console({
      silent: Boolean(options.silent)
    })]
  });
};

function rewriteField(info, field) {
  const val = getIn__default["default"](info, field.from);

  if (val) {
    unsetIn__default["default"](info, field.from);
    setIn__default["default"](info, field.to, field.replaceValue ? field.replaceValue(val) : val);
  }
}

function rewriteFieldsFormatter(options) {
  return logform.format(info => {
    var _context;

    const clone = cloneDeep__default["default"](info);

    _forEachInstanceProperty__default["default"](_context = options.fields).call(_context, field => {
      rewriteField(clone, field);
    });

    return clone;
  })(options);
}

exports.createAccessLoggerMiddleware = createAccessLoggerMiddleware;
exports.createApplicationLogger = createApplicationLogger;
exports.rewriteFieldsFormatter = rewriteFieldsFormatter;
